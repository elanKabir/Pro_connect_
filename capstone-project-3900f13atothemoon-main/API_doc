
1.	Authentication

-	Register User: Register a new user.
    Endpoint:/v2/register
    HTTP Method:POST
    Parameters: None

    Request Body:
        email (string): The user's email address.
        password (string): The user's password.
        entityname (string): The name of the user's entity.
        phone (string): The user's phone number.
        location (string): The user's location.
        abn (string): The user's ABN (Australian Business Number).
        role (string): The user's role.
        Response
        message (string): A message indicating the result of the registration.
        status (string): The status of the registration, either "success" or "error."
        data (object): Additional data related to the registration.
        token (string): A JWT token for the registered user.
    
    HTTP Status Codes:
        200 OK: Registration successful.
        403 Forbidden: Email or ABN already exists. Please try again.
        500 Internal Server Error: An error occurred during registration.

    Example Request:     
    POST /v2/register
    {
    "email": "user@example.com",
    "password": "password123",
    "entityname": "Example Entity",
    "phone": "+1234567890",
    "location": "Example City",
    "abn": "12345678901",
    "role": "user"
    }

-	Login User: Log in an existing user.

    Endpoint: /v2/login
    HTTP Method: POST
    Parameters:None

    Request Body:
        email (string): The user's email address.
        password (string): The user's password.

    Response:
        message (string): A message indicating the result of the login.
        status (string): The status of the login, either "success" or "error."
        data (object): Additional data related to the login.
        token (string): A JWT token for the logged-in user.

    HTTP Status Codes:
        200 OK: Login successful.
        401 Unauthorized: Invalid email or password.
        500 Internal Server Error: An error occurred during login.

    Example Request: POST /v2/login
    {
    "email": "user@example.com",
    "password": "password123"
    }

- Change Password: Change the password of a user.

    Endpoint: /v3/change_password
    HTTP Method: POST
    Parameters:
        user_id (string): User ID for which the password is to be changed (Query Parameter).
    
    Request Body:
        old_password (string): The user's current password.
        new_password (string): The user's new password.

    Response:
        message (string): A message indicating the result of the password change.
        status (string): The status of the password change, either "success" or "error."
        data (object): Additional data related to the password change.
        user_id (string): The ID of the user for which the password was changed.
    
    HTTP Status Codes:
        200 OK: Password change successful.
        401 Unauthorized: Invalid old password or user not found.
        500 Internal Server Error: An error occurred during password change.
    
    Example Request:
        POST /v3/change_password?user_id=5f9a1dcd7d0ad109fce3f563
        {
        "old_password": "old_password123",
        "new_password": "new_password456"
        }

2. Profile

- Edit User Profile:Edit the profile of a user.
    Endpoint:/v2/edit_profile
    HTTP Method: PUT
    Parameters: None

    Request Body:
        data (object): User profile data to be updated.
        Request Headers

        Authorization (string): JWT token for user authentication.
    Response:
        message (string): A message indicating the result of the profile edit.
        status (string): The status of the profile edit, either "success" or "error."
        data (object): Additional data related to the profile edit.
        user_id (string): The ID of the user for which the profile was edited.
    
    HTTP Status Codes:
        200 OK: Profile edit successful.
        401 Unauthorized: Invalid or missing authorization token.
        403 Forbidden: Invalid user ID.
        500 Internal Server Error: An error occurred during profile edit.
    
    Example Request
        PUT /v2/edit_profile
        {
        "email": "new_email@example.com",
        "phone": "+1234567890",
        "location": "New Location",
        "entityname": "New Entity Name"
        }

- Upload CV: Upload a CV (Curriculum Vitae) to a    user's profile.

    Endpoint:/upload_cv
    HTTP Method: POST
    Parameters: None

    Request Body:
        file (file): The CV file to be uploaded.
        Request Headers

        Authorization (string): JWT token for user authentication.

    Response:
        message (string): A message indicating the result of the CV upload.
        status (string): The status of the CV upload, either "success" or "error."
        data (object): Additional data related to the CV upload.
        user_id (string): The ID of the user for whom the CV was uploaded.
        cv_id (string): The ID of the uploaded CV document.

    HTTP Status Codes
        200 OK: CV upload successful.
        401 Unauthorized: Invalid or missing authorization token.
        500 Internal Server Error: An error occurred during CV upload.
        Example Request

- Upload Profile Photo: Upload a profile photo to a user's profile.

    Endpoint:/upload_profile_photo
    HTTP Method:POST
    Parameters:None

    Request Body:
        file (file): The profile photo file to be uploaded.
        Request Headers
        Authorization (string): JWT token for user authentication.
    
    Response:
        message (string): A message indicating the result of the profile photo upload.
        status (string): The status of the profile photo upload, either "success" or "error."
        data (object): Additional data related to the profile photo upload.
        user_id (string): The ID of the user for whom the profile photo was uploaded.
        img_id (string): The ID of the uploaded profile photo document.

    HTTP Status Codes: 
        200 OK: Profile photo upload successful.
        401 Unauthorized: Invalid or missing authorization token.
        500 Internal Server Error: An error occurred during profile photo upload.

- List User Skills: List the skills associated with a user.

    Endpoint: /list_skills
    HTTP Method: GET
    Parameters:
        user_id (string): The ID of the user whose skills are to be listed (Query Parameter).
        
    Response:
        message (string): A message indicating the result of the skill list operation.
        status (string): The status of the skill list operation, either "success" or "error."
        data (object): Additional data related to the skill list.
        skill list (list): The list of skills associated with the user.

    HTTP Status Codes:
        200 OK: Skill list retrieval successful.
        403 Forbidden: User not found.
        500 Internal Server Error: An error occurred during skill list retrieval.

- Boost User Profile: Boost a user's profile.
    Endpoint:/boost_profile
    HTTP Method: POST
    Parameters:None
    Request Headers:
        Authorization (string): JWT token for user authentication.
    Response:
        message (string): A message indicating the result of boosting the user's profile.
        status (string): The status of the profile boost, either "success" or "error."
        data (object): Additional data related to the profile boost.
        user_boosted (string): A boolean indicating whether the user's profile was boosted.
    HTTP Status Codes:
        200 OK: Profile boost successful.
        400 Bad Request: User already boosted one profile or only professional users can boost profiles.
        401 Unauthorized: Invalid or missing authorization token.
        500 Internal Server Error: An error occurred during profile boost.


3. Project
- Create Project: Create a project for a company user.
    Endpoint: POST /create_project
    Request Headers: Authorization (string): JWT token for user authentication.
    Request Body:
        data (object): Project data including title, description, category, budget, deadline, professional_num, location, and project_type.
    Response:
        message (string): A message indicating the result of the project creation.
        status (string): The status of the project creation, either "success" or "error."
        data (object): Additional data related to the project creation.
        project_id (string): The ID of the newly created project.
    HTTP Status Codes:
        201 Created: Project creation successful.
        400 Bad Request: Missing or invalid project data.
        401 Unauthorized: Invalid or missing authorization token.
        500 Internal Server Error: An error occurred during project creation.

- Create Project: Create a project for a company user.
    Endpoint: POST /create_project
    Request Headers:
        Authorization (string): JWT token for user authentication.

    Request Body
        data (object): Project data including title, description, category, budget, deadline, professional_num, location, and project_type.

    
    Response:
        message (string): A message indicating the result of the project creation.
        status (string): The status of the project creation, either "success" or "error."
        data (object): Additional data related to the project creation.
        project_id (string): The ID of the newly created project.

    HTTP Status Codes:
        201 Created: Project creation successful.
        400 Bad Request: Missing or invalid project data.
        401 Unauthorized: Invalid or missing authorization token.
        500 Internal Server Error: An error occurred during project creation.

- Edit Project Detail: Edit project details for a company user.

    Endpoint: PUT /edit_project_detail

    Request Headers:
    Authorization (string): JWT token for user authentication.
    
    Request Body:
        data (object): New project details to update, including project_id, title, description, category, budget, deadline, professional_num, location, project_type, and status.
    
    Response
        message (string): A message indicating the result of editing the project details.
        status (string): The status of the project details edit, either "success" or "error."
        data (object): Additional data related to the project details edit.
        project_data (object): The updated project data.

    HTTP Status Codes:
        200 OK: Project details edit successful.
        400 Bad Request: Missing or invalid project data.
        401 Unauthorized: Invalid or missing authorization token.
        403 Forbidden: Project not found or unauthorized access.
        500 Internal Server Error: An error occurred during project details edit.


- Issue Certificate: Issue certificates to professionals who have completed a project.

    Endpoint:This function is called internally within the company_edit_project_detail function.

    Request Body:
        certificate_collection (pymongo.collection.Collection): MongoDB collection for certificate data.
        professionals (list): List of professionals who completed the project.
        project_id (str): ID of the project for which certificates are issued.
        project_title (str): Title of the project.
        project_owner (str): Owner of the project.
        app (Flask): Flask application object.

    Response
        message (string): A message indicating the result of issuing certificates.
        status (string): The status of certificate issuance, either "success" or "error."
        data (object): Additional data related to certificate issuance.
        
    HTTP Status Codes:
        200 OK: Certificate issuance successful.
        500 Internal Server Error: An error occurred during certificate issuance.

- Delete Project:Delete a project created by a company user.

    Endpoint:DELETE /delete_project
    Request Headers:
    Authorization (string): JWT token for user authentication.

    Request Parameters:
        project_id (string): ID of the project to delete (Query Parameter).

    Response:
        message (string): A message indicating the result of deleting the project.
        status (string): The status of the project deletion, either "success" or "error."
        data (object): Additional data related to the project deletion.
        project_id (string): The ID of the deleted project.
    
    HTTP Status Codes:
        200 OK: Project deletion successful.
        400 Bad Request: Project not found or unauthorized access.
        500 Internal Server Error: An error occurred during project deletion.


- Applied User List: Get a list of users who have applied to join a project.
    Endpoint: GET /applied_user_list
    Request Headers:
        Authorization (string): JWT token for user authentication.
        Request Parameters

        project_id (string): ID of the project for which applied users are retrieved (Query Parameter).
    
    Response:
        message (string): A message indicating the result of retrieving applied users.
        status (string): The status of applied user retrieval, either "success" or "error."
        data (object): Additional data related to applied user retrieval.
        applied_users (list): List of users who have applied to the project.

    HTTP Status Codes:
        200 OK: Applied users retrieved successfully.
        400 Bad Request: Project not found or unauthorized access.
        500 Internal Server Error: An error occurred during applied user retrieval.




3. Review
- Create Review
    Endpoint: /create_review
    Method: POST
    Description: Creates a review for a user based on a completed project.
    Headers:
        Authorization: Bearer token
    Body:
        star_rating: (String) Rating given by the user.
        review_message: (String) Message or feedback of the review.
        receiver_user_id: (String) User ID of the receiver of the review.
        project_id: (String) ID of the project associated with the review.`
    Response:
        Status: Success or Error
        Message: Description of the outcome
        Data: Review details or error information
- List Reviews
    Endpoint: /list_review
    Method: GET
    Description: Lists reviews created by a user.
    Headers:
        Authorization: Bearer token
    Response:
        Status: Success or Error
        Message: Description of the outcome
        Data: List of reviews and average rating
- List Reviews (Version 2)
    Endpoint: /v2/list_review
    Method: GET
    Description: Alternative version to list reviews created by a user.
        Parameters:
            user_id: (String) User ID of the user whose reviews are to be listed.
        Response:
            Status: Success or Error
            Message: Description of the outcome
            Data: List of reviews and average rating
- View Review Detail
    Endpoint: /view_review_detail
    Method: GET
    Description: View details of a specific review.
    Parameters:
        user_id: (String) User ID of the user viewing the review.
        review_id: (String) ID of the review to view.
    Response:
        Status: Success or Error
        Message: Description of the outcome
        Data: Details of the specified review

- Browse All Projects:Browse all projects based on various filters.
    Endpoint: GET /browse_all_projects

    Request Parameters
        query (string, optional): A search query to filter projects. Defaults to None.
        project_type (list of string, optional): List of project types to filter by. Defaults to None.
        project_category (list of string, optional): List of project categories to filter by. Defaults to None.
        project_location (list of string, optional): List of project locations to filter by. Defaults to None.
        project_status (list of string, optional): List of project statuses to filter by. Defaults to None.
        sortby (string, optional): Sort order for projects ("Newest" or "Oldest"). Defaults to "Newest".
    Response
        message (string): A message indicating the result of retrieving the project list.
        status (string): The status of the project list retrieval, either "success" or "error."
        data (object): Additional data related to the project list retrieval.
        projects (list of object): The list of projects based on the specified filters.
    HTTP Status Codes
        200 OK: Project list retrieved successfully.
        500 Internal Server Error: An error occurred during project list retrieval.


4. Admin
    - View All Users (Admin)
        Endpoint: /v2/view_user
        Method: GET
        Description: Allows administrators to view all users.
        Headers:
            Authorization: Bearer token
        Response:
            JSON containing all user details (excluding password)

    - Delete User Account (Admin)
        Endpoint: /v3/delete_account
        Method: DELETE
        Description: Allows administrators to delete a user account.
        Headers:
            Authorization: Bearer token
        Parameters:
            uid: (String) ID of the user to be deleted.
        Response:
            JSON indicating the success or failure of the operation

    - View Project List (Admin)
        Endpoint: /v1/admin/project
        Method: GET
        Description: Allows administrators to view a list of all projects.
        Headers:
            Authorization: Bearer token
        Response:
        JSON containing a list of projects

    - View Statistics (Admin)
        Endpoint: /v1/admin/statistics
        Method: GET
        Description: Allows administrators to view various system statistics.
        Headers:
        Authorization: Bearer token
        Response:


5. Review
    - Endpoint: /create_review
    HTTP Method: POST

    Description::Creates a review for a user based on a completed project.

    Parameters:
        Authorization (string): The user's authentication token (Header Parameter).
        data (object): The data containing the review details (Body Parameter). This includes:
        star_rating (int): The star rating given in the review.
        review_message (string): The message or feedback provided in the review.
        receiver_user_id (string): The ID of the user receiving the review.
        project_id (string): The ID of the project associated with the review.
    Response:
        message (string): A message indicating the result of the review creation operation.
        status (string): The status of the operation, either "success" or "error."
        code (int): HTTP status code.
        data (object): Additional data related to the review operation. This includes:
        receiver_id (string): The ID of the user who received the review.
        review_id (string): The ID of the created review.
        review_doc (object): The document of the created review.
        receiver_token (string): The token of the receiver.
        receiver_rating (string): The updated rating of the receiver.
        
    HTTP Status Codes:
        200 OK: Review creation successful.
        400 Bad Request: Missing or invalid data.
        403 Forbidden: User authentication failed.
        500 Internal Server Error: An error occurred during review creation.